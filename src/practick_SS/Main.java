package practick_SS;import java.io.*;import java.util.ArrayList;import java.util.Comparator;import java.util.List;public class Main {    public static void main(String[] args) {        Employee employee1 = new EmployeeFixedSalary(1, "Vasyl", 6000);        Employee employee2 = new EmployeeFixedSalary(2, "Olga", 7000);        Employee employee3 = new EmployeeFixedSalary(3, "Lesya", 6500);        Employee employee4 = new EmployeeFixedSalary(4, "Vika", 10000);        Employee employee5 = new EmployeeFixedSalary(5, "Roma", 10000);        Employee employee6 = new EmployeeFixedSalary(6, "Vovk", 10000);        Employee employee7 = new EmployeeHourlySalary(7, "Ira", 200);        Employee employee8 = new EmployeeHourlySalary(8, "Nik", 50);        Employee employee9 = new EmployeeHourlySalary(9, "Borya", 100);        Employee employee10 = new EmployeeHourlySalary(10, "Oleg", 100);        Employee employee11 = new EmployeeHourlySalary(11, "Sam", 120);        Employee employee12 = new EmployeeHourlySalary(12, "Andrew", 200);        List<Employee> employees = new ArrayList<>();        employees.add(employee1);        employees.add(employee2);        employees.add(employee3);        employees.add(employee4);        employees.add(employee5);        employees.add(employee6);        employees.add(employee7);        employees.add(employee8);        employees.add(employee9);        employees.add(employee10);        employees.add(employee11);        employees.add(employee12);        employees.stream()                .sorted(Comparator.comparingDouble(Employee::averageMonthlySalary).thenComparing(Employee::getName))                //  .sorted((o1,o2)->Double.compare(o2.averageMonthlySalary(),o1.averageMonthlySalary()))                .forEach(employee -> System.out.println(employee));        System.out.println("\n *********************************************\n ");        employees.stream()                .sorted(Comparator.comparingDouble(Employee::averageMonthlySalary).thenComparing(Employee::getName))                //  .sorted((o1,o2)->Double.compare(o2.averageMonthlySalary(),o1.averageMonthlySalary()))                .limit(5)                .forEach(employee -> System.out.println(employee));        System.out.println("\n *********************************************\n ");        employees.stream()                .sorted(Comparator.comparingDouble(Employee::averageMonthlySalary).thenComparing(Employee::getName))                //  .sorted((o1,o2)->Double.compare(o2.averageMonthlySalary(),o1.averageMonthlySalary()))                .skip(employees.size() - 3)                .forEach(employee -> System.out.println(employee.getId()));        System.out.println("\n *********************************************\n ");        employees.stream()                .sorted(Comparator.comparingDouble(Employee::averageMonthlySalary)                        .thenComparing(Employee::getName)                        .reversed())                //  .sorted((o1,o2)->Double.compare(o2.averageMonthlySalary(),o1.averageMonthlySalary()))                .limit(3)                .forEach(employee -> System.out.println(employee.getId()));        System.out.println("\n *******************file**************************\n ");        //read/write file task        File file = new File("employeeTask.txt");        if (!file.exists()) {            try {                file.createNewFile();            } catch (IOException e) {                e.printStackTrace();            }        }        try {            FileOutputStream fileOutputStream = new FileOutputStream(file);            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);            objectOutputStream.writeObject(employees);            objectOutputStream.close();            fileOutputStream.close();            FileInputStream fileInputStream = new FileInputStream(file);            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);            List<Employee> employeeList =(List<Employee>) objectInputStream.readObject();            employeeList                    .stream()                    .sorted(Comparator.comparingDouble(Employee::averageMonthlySalary).thenComparing(Employee::getName))                    .forEach(employee -> System.out.println(employee));            objectInputStream.close();            fileInputStream.close();        }  catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }}